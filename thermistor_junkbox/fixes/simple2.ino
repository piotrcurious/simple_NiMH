/**
 * Estimates temperature difference a AAA NiMH cell will gain when heated by current.
 * 
 * @param voltageLoaded     Voltage across cell with current flowing (V)
 * @param voltageUnloaded   Voltage across cell without current (V)
 * @param current           Current through the cell (A)
 * @param internalRes       Internal resistance of cell (Ohms)
 * @param ambientTemp       Ambient temperature (°C)
 * @param cellTemp          Current cell temperature (°C)
 * @param cellDiameter      Diameter of AAA cell (m), default 10.5mm
 * @param cellLength        Length of AAA cell (m), default 44.5mm
 * @param timeInterval      Time interval for temperature change calculation (s)
 * @return                  Estimated temperature change in °C over the specified time interval
 */
float estimateBatteryTempDelta(
  float voltageLoaded, 
  float voltageUnloaded, 
  float current, 
  float internalRes,
  float ambientTemp, 
  float cellTemp,
  float cellDiameter = 0.0105,  // AAA diameter in meters
  float cellLength = 0.0445,    // AAA length in meters
  float timeInterval = 1.0      // 1 second by default
) {
  // Physical constants
  const float STEFAN_BOLTZMANN = 5.67e-8;  // Stefan-Boltzmann constant (W/(m²·K⁴))
  const float EMISSIVITY = 0.9;            // Typical emissivity for battery surface
  const float AIR_THERMAL_CONDUCTIVITY = 0.026;  // W/(m·K) at room temperature
  const float NUSSELT_NUMBER = 4.0;        // Assumed value for natural convection
  const float SPECIFIC_HEAT_CAPACITY = 1100.0;   // J/(kg·K) for NiMH (approximate)
  const float DENSITY = 3000.0;            // kg/m³ for NiMH (approximate)
  
  // Calculate battery dimensions and properties
  float radius = cellDiameter / 2.0;
  float surfaceArea = 2.0 * PI * radius * radius + 2.0 * PI * radius * cellLength;  // m²
  float volume = PI * radius * radius * cellLength;  // m³
  float mass = volume * DENSITY;  // kg
  
  // Convert temperatures to Kelvin for radiation calculations
  float cellTempK = cellTemp + 273.15;
  float ambientTempK = ambientTemp + 273.15;
  
  // Calculate power generated by internal resistance (Joule heating)
  // Method 1: Using the provided internal resistance
  float powerGenerated = current * current * internalRes;
  
  // Method 2: Using voltage drop (alternative calculation)
  // float voltageDrop = voltageUnloaded - voltageLoaded;
  // float powerGenerated2 = current * voltageDrop;
  // We'll use Method 1 as it's more direct
  
  // Calculate heat loss through convection to air
  // Using simplified convection model: q = h * A * (T_surface - T_ambient)
  // where h is approximated using the Nusselt number
  float convectionCoeff = NUSSELT_NUMBER * AIR_THERMAL_CONDUCTIVITY / cellDiameter;
  float convectionLoss = convectionCoeff * surfaceArea * (cellTemp - ambientTemp);
  
  // Calculate heat loss through radiation
  // Using Stefan-Boltzmann law: q = ε * σ * A * (T⁴_surface - T⁴_ambient)
  float radiationLoss = EMISSIVITY * STEFAN_BOLTZMANN * surfaceArea * 
                        (pow(cellTempK, 4) - pow(ambientTempK, 4));
  
  // Calculate net heat gain
  float netHeatFlow = powerGenerated - convectionLoss - radiationLoss;  // Watts (J/s)
  
  // Calculate temperature change over the specified time interval
  // ΔT = Q / (m * c)
  float tempChange = (netHeatFlow * timeInterval) / (mass * SPECIFIC_HEAT_CAPACITY);
  
  return tempChange;
}
